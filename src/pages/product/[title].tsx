import { loadStripe, Stripe } from '@stripe/stripe-js';
import { useMutation, useQuery } from '@tanstack/react-query';
import Head from 'next/head';
import NextImage from 'next/image';
import { useRouter } from 'next/router';
import Navbar from '../../components/Navbar';
import Footer from '../../components/Footer';
import Skelton from '../../components/Skelton';

const stripePublishableKey: string =
	process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!; // Eliminar el sÃ­mbolo "?" si la variable no puede ser nula o indefinida
const stripePromiseclientSide = loadStripe(stripePublishableKey);

const SingleProduct = () => {
	const router = useRouter();

	const getSingleProduct = async () => {
		const title = router?.query?.title;

		const respJSON = await fetch(`/api/products/${title}`);
		const resp = await respJSON.json();
		return resp;
	};

	const { mutate, isLoading: mutationIsLoading } = useMutation(
		async (body: any) => {
			const respJSON = await fetch('/api/create-checkout-session', {
				method: 'POST',
				body: JSON.stringify(body),
			});
			const resp = await respJSON.json();
			const stripe = (await stripePromiseclientSide) as Stripe;
			const result = await stripe.redirectToCheckout({
				sessionId: resp.id,
			});
			return result;
		},
	);

	const { data, isLoading } = useQuery(
		[`singleProduct, ${router?.query?.title}`],
		getSingleProduct,
		{
			enabled: Boolean(router?.query?.title),
		},
	);

	const product = data?.product;

	return (
		<div className='bg-primaryGray'>
			<Head>
				<title>{isLoading ? 'Loading...' : `${product?.title}`}</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<Navbar />
			<main className='container mx-6 md:mx-auto'>
				{isLoading ? (
					<Skelton />
				) : (
					<div>
						<div className='pt-6 pb-16 sm:pb-24'>
							<div className='mx-auto mt-8'>
								<div className='flex flex-col md:flex-row gap-x-8'>
									<div className='min-h-80 w-full overflow-hidden rounded-md group-hover:opacity-75 lg:aspect-none lg:h-80'>
										<NextImage
											width='250'
											height='250'
											src={`${product.image}`}
											alt={product.title}
											className='h-full w-full object-cover object-center lg:h-full lg:w-full'
										/>
									</div>
									<div className='lg:col-span-5 lg:col-start-8 mt-8 md:mt-0'>
										<h1 className='text-xl font-medium text-gray-100 '>
											{product.title}
										</h1>
										<p className='text-xl font-light text-gray-300 mt-4'>
											{product.description}
										</p>
										<p className='text-xl font-normal text-gray-200 mt-4'>
											Mex {product.price}
										</p>
										<button
											name='Buy Now'
											onClick={() =>
												mutate({
													title: product.title,
													image: product.image,
													description: product.description,
													price: product.price,
												})
											}
											disabled={mutationIsLoading}
											type='button'
											className='inline-flex items-center rounded-md border border-transparent bg-sky-800 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-sky-900  mt-4'>
											Comprar ahora
										</button>
									</div>
								</div>
							</div>
						</div>
					</div>
				)}
			</main>
			<Footer />
		</div>
	);
};

export default SingleProduct;
